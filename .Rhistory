data <- read_csv("http://midas.mat.uc.cl/courses/bc2019/Datasets/candy_crush.csv")
library(tidyverse)
data <- read_csv("http://midas.mat.uc.cl/courses/bc2019/Datasets/candy_crush.csv")
data
library(DT)
?datatable
library(gapminder)
data("gapminder")
gapminder
install.packages("dslabs")
library(dslabs)
data("gapminder", package = "dslabs")
gapminder
View(gapminder)
library(dslabs)
data("gapminder", package = "dslabs")
head(gapminder)
Chile <- gapminder %>%
filter(country == "Chile")
# Trabajaremos con los datos de Chile!
library(tidyverse)
Chile <- gapminder %>%
filter(country == "Chile")
Chile
library(GGally)
ggpairs(Chile)
View(Chile)
Chile %>%
select(-country, -continent, -region) %>%
ggpairs()
modelo1 <- lm(life_expectancy ~ year, data = Chile)
modelo1
# Analicemos los coeficientes
summary(modelo1)
# Veamos la recta ajustada
library(ggiraph);library(ggiraphExtra)
ggPredict(modelo1)
ggPredict(modelo1, interactive = TRUE, se = TRUE)
predict(modelo1, newdata = tibble(year = 2017:2020), interval = "predict")
modelo2 <- lm(life_expectancy ~ year + population, data = Chile)
# Coeficientes del modelo2
summary(modelo2)
confint(modelo2)
# Predecir una nueva observación
predict(modelo2, newdata = tibble(year = 2018, population = 19000000), interval = "predict")
# Modelos anidados
modelo3 <- lm(life_expectancy ~ year + population + gdp, data = Chile)
anova(modelo2,modelo3)
# Modelos anidados
modelo3 <- lm(life_expectancy ~ year + population + gdp, data = Chile)
anova(modelo2,modelo3)
Chile <- gapminder %>%
filter(country == "Chile") %>%
select(-country, -continent, -region) %>%
drop_na()
modelo2 <- lm(life_expectancy ~ year + population, data = Chile)
# Predecir una nueva observación
predict(modelo2, newdata = tibble(year = 2018, population = 19000000), interval = "predict")
# Modelos anidados
modelo3 <- lm(life_expectancy ~ year + population + gdp, data = Chile)
anova(modelo2,modelo3)
step(lm(life_expectancy ~ 1, data = Chile), life_expectancy ~ .,
direction = "both", trace = FALSE)
# Selección de variables
names(Chile)
step(lm(life_expectancy ~ 1, data = Chile),
life_expectancy ~ year + infant_mortality + fertility + population + gdp,
direction = "both", trace = FALSE)
stepwise <- step(lm(life_expectancy ~ 1, data = Chile),
life_expectancy ~ year + infant_mortality + fertility + population + gdp,
direction = "both", trace = FALSE)
stepwise$coefficients
summarise(stepwise)
stepwise$model
coef(stepwise)
library(lmtest)
coeftest(stepwise)
summary(stepwise)
# Comparemos este modelo con el que no posee mortalidad infantil
modelo5 <- lm(life_expectancy ~ gdp + population + fertility, data = Chile)
summary(modelo5)
modelo6 <- lm(life_expectancy ~ gdp + population, data = Chile)
summary(modelo6)
AIC(modelo5,modelo6,modelo7)
AIC(modelo4,modelo5,modelo6)
modelo4 <- step(lm(life_expectancy ~ 1, data = Chile),
life_expectancy ~ year + infant_mortality + fertility + population + gdp,
direction = "both", trace = FALSE)
AIC(modelo4,modelo5,modelo6)
BIC(modelo4,modelo5,modelo6)
# Comparacion de modelo usando r2-ajustado
c(summary(model5)$adj.r.squared,
summary(model5)$adj.r.squared,
summary(model6)$adj.r.squared )
# Comparacion de modelo usando r2-ajustado
c(summary(modelo4)$adj.r.squared,
summary(modelo5)$adj.r.squared,
summary(modelo6)$adj.r.squared )
# Bondad de ajuste
finalmodel <- model4
# Normalidad de los errores
data <- tibble("fit" = finalmodel$fitted.values, "res" = finalmodel$residuals)
p1 <- ggplot(data, aes(sample = res)) + stat_qq() + stat_qq_line()
# Bondad de ajuste
finalmodel <- modelo4
# Normalidad de los errores
data <- tibble("fit" = finalmodel$fitted.values, "res" = finalmodel$residuals)
p1 <- ggplot(data, aes(sample = res)) + stat_qq() + stat_qq_line()
p1
# Homocedasticidad de la varianza
p1 <- ggplot(data) + geom_point(aes(x = fit, y = res))
p1
# Independencia de los errores
dwtest(life_expectancy ~ gdp + population + fertility + infant_mortality, data = Chile)
library(ggrepel)
data <- data %>% mutate("res_stud" = rstudent(finalmodel), labels = seq(1,nrow(data)))
ggplot(data, aes(x = fit, y = res_stud, label = labels)) + geom_point() +
geom_hline(yintercept = qnorm(0.025)) + geom_hline(yintercept = qnorm(0.975)) +
geom_text(hjust = 1.5, size = 2.5, check_overlap = TRUE) + xlab("Valores ajustados") +
ylab("Residuos Studentizados")
# Identificación de puntos influyentes
summary(influence.measures(finalmodel))
install.packages("shinydashboard")
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("nrand", "Simulaciones",
min = 50, max = 100, value = 70),
selectInput("col", "Color", c("red", "blue", "black")),
checkboxInput("punto", "Puntos:", value = FALSE)
),
mainPanel(plotOutput("outplot"))
)
)
server <- function(input, output) {
output$outplot <- renderPlot({
set.seed(123)
x <- rnorm(input$nrand)
t <- ifelse(input$punto, "b", "l")
plot(x, type = t, col = input$col)
})
}
runApp(list(ui = ui, server = server))
install.packages("shinydashboard")
library(shinydashboard)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Quick Example"),
dashboardSidebar(textInput("text", "Text")),
dashboardBody(
valueBox(100, "Basic example"),
tableOutput("mtcars")
)
)
server <- function(input, output) {
output$mtcars <- renderTable(head(mtcars))
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("nrand", "Simulaciones",
min = 50, max = 100, value = 70),
selectInput("col", "Color", c("red", "blue", "black")),
checkboxInput("punto", "Puntos:", value = FALSE)
),
mainPanel(plotOutput("outplot"))
)
)
server <- function(input, output) {
output$outplot <- renderPlot({
set.seed(123)
x <- rnorm(input$nrand)
t <- ifelse(input$punto, "b", "l")
plot(x, type = t, col = input$col)
})
}
runApp(list(ui = ui, server = server))
?sliderInput
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("nrand", "Simulaciones",
min = 50, max = 100, value = 70),
selectInput("col", "Color", c("red", "blue", "black")),
checkboxInput("punto", "Puntos:", value = FALSE)
),
mainPanel(plotOutput("outplot"))
)
)
server <- function(input, output) {
output$outplot <- renderPlot({
set.seed(123)
x <- rnorm(input$nrand)
t <- ifelse(input$punto, "b", "l")
plot(x, type = t, col = input$col)
})
}
runApp(list(ui = ui, server = server))
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("nrand", "Simulaciones",
min = 50, max = 100, value = 70),
selectInput("col", "Color", c("red", "blue", "black")),
checkboxInput("punto", "Puntos:", value = FALSE)
),
mainPanel(plotOutput("outplot"), textOutput("texto"))
)
)
server <- function(input, output) {
output$outplot <- renderPlot({
set.seed(123)
x <- rnorm(input$nrand)
t <- ifelse(input$punto, "b", "l")
plot(x, type = t, col = input$col)
})
output$texto <- renderText({
input$nrand + 1
})
}
runApp(list(ui = ui, server = server))
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("nrand", "Simulaciones",
min = 50, max = 100, value = 70),
selectInput("col", "Color", c("red", "blue", "black")),
checkboxInput("punto", "Puntos:", value = FALSE)
),
mainPanel(textOutput("texto"),plotOutput("outplot"))
)
)
server <- function(input, output) {
output$outplot <- renderPlot({
set.seed(123)
x <- rnorm(input$nrand)
t <- ifelse(input$punto, "b", "l")
plot(x, type = t, col = input$col)
})
output$texto <- renderText({
input$nrand + 1
})
}
runApp(list(ui = ui, server = server))
source('C:/Users/ruben/Desktop/shiny.R')
source('C:/Users/ruben/Desktop/shiny.R')
source('C:/Users/ruben/Desktop/shiny.R')
runApp('Actividades/Clase 6/Solución Actividad II.R')
?textInput
runApp('Actividades/Clase 6/Solución Actividad II.R')
?checkboxInput
runApp('Actividades/Clase 6/Solución Actividad II.R')
source('C:/Users/ruben/Desktop/shiny.R')
runApp('Actividades/Clase 6/Solución Actividad II.R')
###################
## Instrucciones ##
###################
# Complete los espacios en "..." para que la app shiny funcione
library(shiny)
library(gapminder)
library(plotly)
library(colourpicker)
library(DT)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
textInput("titulo", "Ingrese su título", value = "GDP vs life exp"), # Título ingresado por usuario
numericInput("size", "Point size", 1, 1),
checkboxInput("fit", "Agregar LM", FALSE),
colourInput("color", "Point color", value = "blue"),
selectizeInput("continents", "Continents",
choices = levels(gapminder$continent),
multiple = TRUE,
selected = "Europe"),
sliderInput("years", "Years",
min(gapminder$year), max(gapminder$year),
value = c(1977, 2002))
),
mainPanel(
plotlyOutput("plot"), dataTableOutput("table") # Utilizar plotly
)
)
)
# Define the server logic
server <- function(input, output) {
data("gapminder")
output$plot <- renderPlotly({
ggplotly({
data <- subset(gapminder,
continent %in% input$continents &
year >= input$years[1] & year <= input$years[2])
p <- ggplot(data, aes(gdpPercap, lifeExp)) +
geom_point(size = input$size, col = input$color) +
scale_x_log10() +
ggtitle(input$titulo)
if (input$fit) {
p <- p + geom_smooth(method = "lm")
}
p
})
})
output$table <- renderDataTable({
data <- subset(gapminder,
continent %in% input$continents &
year >= input$years[1] & year <= input$years[2])
datatable(data, filter = "top")
})
}
shinyApp(ui = ui, server = server)
